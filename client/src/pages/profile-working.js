import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { useParams, Link, useLocation } from "wouter";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogTrigger, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useAuth } from "@/hooks/useAuth";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { User, Star, MessageCircle, Mail, ArrowLeft, Hammer, Leaf, ServerCog, Palette, DollarSign, Users, BookOpen, Edit, GraduationCap, Shield, ImageIcon, FileText, Plus, Trash2, Building, Calendar } from "lucide-react";
import { DegreeForm } from "@/components/forms/degree-form";
import { CertificateForm } from "@/components/forms/certificate-form";
import { GalleryImageForm } from "@/components/forms/gallery-image-form";
import { WorkHistoryForm } from "@/components/forms/work-history-form";
import { ArchetypeQuiz } from "@/components/forms/archetype-quiz";
const ARCHETYPE_ICONS = {
    "Builder": Hammer,
    "Horticulturist": Leaf,
    "Village Engineer": ServerCog,
    "Designer": Palette,
    "Funder": DollarSign,
    "Storyteller": BookOpen,
    "Artist": Palette,
    "Craftsperson": Hammer,
    "Permaculture Specialist": Leaf,
    "Community Facilitator": Users,
    "Signals Team": Users,
    "Resident Builder": Hammer,
};
const ARCHETYPE_COLORS = {
    "Builder": "holo-gold",
    "Horticulturist": "earth-green",
    "Village Engineer": "electric-green",
    "Designer": "purple-400",
    "Funder": "holo-gold",
    "Storyteller": "neon-cyan",
    "Artist": "purple-400",
    "Craftsperson": "holo-gold",
    "Permaculture Specialist": "earth-green",
    "Community Facilitator": "electric-green",
    "Signals Team": "neon-cyan",
    "Resident Builder": "electric-green",
};
export default function Profile() {
    const params = useParams();
    const userId = params.id;
    const { user: currentUser, isAuthenticated } = useAuth();
    const [activeTab, setActiveTab] = useState("posts");
    const { toast } = useToast();
    const queryClient = useQueryClient();
    const [, setLocation] = useLocation();
    // Dialog states
    const [showDegreeForm, setShowDegreeForm] = useState(false);
    const [showCertificateForm, setShowCertificateForm] = useState(false);
    const [showWorkHistoryForm, setShowWorkHistoryForm] = useState(false);
    const [showGalleryForm, setShowGalleryForm] = useState(false);
    const [showArchetypeQuiz, setShowArchetypeQuiz] = useState(false);
    const { data: user, isLoading: userLoading } = useQuery({
        queryKey: ['/api/users', userId],
        enabled: !!userId,
    });
    const { data: userPosts = [], isLoading: postsLoading } = useQuery({
        queryKey: ['/api/posts/user', userId === 'me' && currentUser ? currentUser.id : userId],
        enabled: !!userId,
    });
    const { data: userDegrees = [] } = useQuery({
        queryKey: ['/api/users', userId === 'me' && currentUser ? currentUser.id : userId, 'degrees'],
        enabled: !!userId,
    });
    const { data: userCertificates = [] } = useQuery({
        queryKey: ['/api/users', userId === 'me' && currentUser ? currentUser.id : userId, 'certificates'],
        enabled: !!userId,
    });
    const { data: userGallery = [] } = useQuery({
        queryKey: ['/api/users', userId === 'me' && currentUser ? currentUser.id : userId, 'gallery'],
        enabled: !!userId,
    });
    const { data: userWorkHistory = [] } = useQuery({
        queryKey: ['/api/users', userId === 'me' && currentUser ? currentUser.id : userId, 'work-history'],
        enabled: !!userId,
    });
    const { data: userArchetype } = useQuery({
        queryKey: ['/api/users', userId === 'me' && currentUser ? currentUser.id : userId, 'archetype-assessment'],
        enabled: !!userId,
    });
    // Check if viewing own profile
    const isOwnProfile = isAuthenticated && (userId === 'me' || (userId === currentUser?.id));
    // Delete mutations
    const deleteDegree = useMutation({
        mutationFn: (id) => apiRequest(`/api/degrees/${id}`, 'DELETE'),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/users', userId, 'degrees'] });
            toast({ title: "Degree deleted successfully" });
        },
    });
    const deleteCertificate = useMutation({
        mutationFn: (id) => apiRequest(`/api/certificates/${id}`, 'DELETE'),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/users', userId, 'certificates'] });
            toast({ title: "Certificate deleted successfully" });
        },
    });
    const deleteWorkHistory = useMutation({
        mutationFn: (id) => apiRequest(`/api/work-history/${id}`, 'DELETE'),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/users', userId, 'work-history'] });
            toast({ title: "Work history deleted successfully" });
        },
    });
    const deleteGalleryImage = useMutation({
        mutationFn: (id) => apiRequest(`/api/gallery/${id}`, 'DELETE'),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/users'] });
            toast({ title: "Image deleted successfully" });
        },
    });
    if (userLoading) {
        return (_jsx("div", { className: "container mx-auto p-6 max-w-6xl", children: _jsxs("div", { className: "animate-pulse", children: [_jsx("div", { className: "h-32 bg-space-800/50 rounded-lg mb-6" }), _jsx("div", { className: "h-8 bg-space-800/50 rounded w-1/4 mb-4" }), _jsx("div", { className: "h-4 bg-space-800/50 rounded w-1/2" })] }) }));
    }
    if (!user) {
        return (_jsx("div", { className: "container mx-auto p-6 max-w-6xl", children: _jsx(Card, { children: _jsxs(CardContent, { className: "p-8 text-center", children: [_jsx(User, { className: "mx-auto mb-4 h-12 w-12 text-space-400" }), _jsx("h3", { className: "text-lg font-semibold mb-2", children: "User Not Found" }), _jsx("p", { className: "text-space-400 mb-4", children: "The profile you're looking for doesn't exist." }), _jsx(Link, { href: "/people", children: _jsxs(Button, { variant: "outline", children: [_jsx(ArrowLeft, { className: "mr-2 h-4 w-4" }), "Back to People"] }) })] }) }) }));
    }
    const userArchetypeData = userArchetype || { primaryArchetype: user?.archetype || 'Village Builder' };
    const ArchetypeIcon = ARCHETYPE_ICONS[userArchetypeData?.primaryArchetype] || Hammer;
    return (_jsxs("div", { className: "container mx-auto p-6 max-w-6xl", children: [_jsx(Card, { className: "mb-6 bg-gradient-to-r from-void to-purple-deep border-purple-deep", children: _jsx(CardContent, { className: "p-8", children: _jsxs("div", { className: "flex flex-col md:flex-row items-start md:items-center gap-6", children: [_jsx("div", { className: "w-32 h-32 bg-gradient-to-br from-neon-cyan to-electric-green rounded-full flex items-center justify-center", children: _jsx(User, { className: "text-space", size: 64 }) }), _jsxs("div", { className: "flex-1", children: [_jsxs("div", { className: "flex items-center gap-4 mb-2", children: [_jsx("h1", { className: "text-3xl font-bold text-holo-gold", "data-testid": "text-username", children: user?.username || user?.email?.split('@')[0] || 'User' }), isOwnProfile && (_jsx(Link, { href: `/profile/${userId}/edit`, children: _jsxs(Button, { variant: "outline", size: "sm", "data-testid": "button-edit-profile", children: [_jsx(Edit, { className: "mr-2 h-4 w-4" }), "Edit Profile"] }) }))] }), _jsxs("div", { className: "flex items-center gap-2 mb-4", children: [_jsx(ArchetypeIcon, { className: "text-electric-green", size: 20 }), _jsx(Badge, { variant: "secondary", className: "bg-electric-green text-space", children: userArchetypeData?.primaryArchetype }), _jsx("span", { className: "text-gray-400", children: "\u2022" }), _jsxs("span", { className: "text-neon-cyan", children: ["Level ", user?.level || 1] }), _jsx("span", { className: "text-gray-400", children: "\u2022" }), _jsxs("span", { className: "text-holo-gold", children: [(user?.contributions || 0).toLocaleString(), " contributions"] })] }), user?.bio && (_jsx("p", { className: "text-gray-300 mb-4", children: user?.bio })), _jsxs("div", { className: "flex items-center gap-4 text-sm text-gray-400", children: [_jsxs("div", { className: "flex items-center gap-1", children: [_jsx(Mail, { size: 16 }), user?.email] }), _jsxs("div", { className: "flex items-center gap-1", children: [_jsx(MessageCircle, { size: 16 }), userPosts?.length || 0, " posts"] })] })] })] }) }) }), _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, className: "space-y-6", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-5 bg-void", children: [_jsx(TabsTrigger, { value: "posts", "data-testid": "tab-posts", children: "Forum Posts" }), _jsx(TabsTrigger, { value: "credentials", "data-testid": "tab-credentials", children: "Credentials" }), _jsx(TabsTrigger, { value: "work", "data-testid": "tab-work", children: "Work History" }), _jsx(TabsTrigger, { value: "gallery", "data-testid": "tab-gallery", children: "Gallery" }), _jsx(TabsTrigger, { value: "archetype", "data-testid": "tab-archetype", children: "Archetype" })] }), _jsxs(TabsContent, { value: "posts", className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("h2", { className: "text-xl font-semibold text-holo-gold", children: "Forum Posts" }), isOwnProfile && (_jsxs(Dialog, { children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { "data-testid": "button-create-post", children: [_jsx(Plus, { className: "mr-2 h-4 w-4" }), "Create Post"] }) }), _jsxs(DialogContent, { className: "bg-void border-purple-deep text-white max-w-4xl max-h-[80vh] overflow-y-auto", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { className: "text-neon-cyan font-cyber", children: "Create New Post" }) }), _jsxs("div", { className: "text-center p-8", children: [_jsx("p", { className: "text-gray-400 mb-4", children: "Choose a forum category to create your post:" }), _jsxs("div", { className: "grid grid-cols-2 gap-3", children: [_jsx(Link, { href: "/forum/land", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Land & Location" }) }), _jsx(Link, { href: "/forum/resources", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Resources" }) }), _jsx(Link, { href: "/forum/people", children: _jsx(Button, { variant: "outline", className: "w-full", children: "People" }) }), _jsx(Link, { href: "/forum/facilities", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Buildings & Infrastructure" }) }), _jsx(Link, { href: "/forum/operations", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Operations" }) }), _jsx(Link, { href: "/forum/ownership", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Ownership" }) })] })] })] })] }))] }), userPosts?.length === 0 ? (_jsx(Card, { children: _jsxs(CardContent, { className: "p-8 text-center", children: [_jsx(FileText, { className: "mx-auto mb-4 h-12 w-12 text-space-400" }), _jsx("h3", { className: "text-lg font-semibold mb-2", children: "No Posts Yet" }), _jsx("p", { className: "text-space-400 mb-4", children: isOwnProfile ? "Start sharing your thoughts with the community!" : "This user hasn't posted anything yet." }), isOwnProfile && (_jsxs(Dialog, { children: [_jsx(DialogTrigger, { asChild: true, children: _jsx(Button, { "data-testid": "button-first-post", children: "Create Your First Post" }) }), _jsxs(DialogContent, { className: "bg-void border-purple-deep text-white max-w-4xl max-h-[80vh] overflow-y-auto", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { className: "text-neon-cyan font-cyber", children: "Create New Post" }) }), _jsxs("div", { className: "text-center p-8", children: [_jsx("p", { className: "text-gray-400 mb-4", children: "Choose a forum category to create your post:" }), _jsxs("div", { className: "grid grid-cols-2 gap-3", children: [_jsx(Link, { href: "/forum/land", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Land & Location" }) }), _jsx(Link, { href: "/forum/resources", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Resources" }) }), _jsx(Link, { href: "/forum/people", children: _jsx(Button, { variant: "outline", className: "w-full", children: "People" }) }), _jsx(Link, { href: "/forum/facilities", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Buildings & Infrastructure" }) }), _jsx(Link, { href: "/forum/operations", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Operations" }) }), _jsx(Link, { href: "/forum/ownership", children: _jsx(Button, { variant: "outline", className: "w-full", children: "Ownership" }) })] })] })] })] }))] }) })) : (_jsx("div", { className: "space-y-4", children: userPosts?.map((post) => (_jsx(Card, { className: "hover:border-electric-green/50 transition-colors", children: _jsxs(CardContent, { className: "p-6", children: [_jsxs("div", { className: "flex justify-between items-start mb-2", children: [_jsx("h3", { className: "text-lg font-semibold text-white hover:text-electric-green", children: _jsx(Link, { href: `/post/${post.id}`, children: post.title }) }), _jsx(Badge, { variant: "outline", children: post.section })] }), _jsxs("p", { className: "text-gray-400 mb-4", children: [post.content.substring(0, 200), "..."] }), _jsxs("div", { className: "flex items-center gap-4 text-sm text-gray-500", children: [_jsx("span", { children: new Date(post.createdAt).toLocaleDateString() }), _jsx("span", { children: "\u2022" }), _jsxs("span", { children: [post.votes || 0, " votes"] })] })] }) }, post.id))) }))] }), _jsxs(TabsContent, { value: "credentials", className: "space-y-6", children: [_jsxs("div", { children: [_jsxs("div", { className: "flex justify-between items-center mb-4", children: [_jsxs("h3", { className: "text-lg font-semibold text-holo-gold flex items-center gap-2", children: [_jsx(GraduationCap, { size: 20 }), "Education"] }), isOwnProfile && (_jsxs(Dialog, { open: showDegreeForm, onOpenChange: setShowDegreeForm, children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { variant: "outline", size: "sm", "data-testid": "button-add-degree", children: [_jsx(Plus, { className: "mr-2 h-4 w-4" }), "Add Degree"] }) }), _jsxs(DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Add Degree" }) }), _jsx(DegreeForm, { onClose: () => setShowDegreeForm(false) })] })] }))] }), userDegrees?.length === 0 ? (_jsx(Card, { children: _jsxs(CardContent, { className: "p-6 text-center", children: [_jsx(GraduationCap, { className: "mx-auto mb-2 h-8 w-8 text-space-400" }), _jsx("p", { className: "text-space-400", children: "No degrees added yet" })] }) })) : (_jsx("div", { className: "grid gap-4", children: userDegrees?.map((degree) => (_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex justify-between items-start", children: [_jsxs("div", { children: [_jsxs("h4", { className: "font-semibold text-white", children: [degree.degree, " in ", degree.field] }), _jsx("p", { className: "text-electric-green", children: degree.institution }), degree.year && _jsxs("p", { className: "text-gray-400", children: ["Class of ", degree.year] })] }), isOwnProfile && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => deleteDegree.mutate(degree.id), disabled: deleteDegree.isPending, "data-testid": `button-delete-degree-${degree.id}`, children: _jsx(Trash2, { size: 16 }) }))] }) }) }, degree.id))) }))] }), _jsx(Separator, { className: "bg-purple-deep/50" }), _jsxs("div", { children: [_jsxs("div", { className: "flex justify-between items-center mb-4", children: [_jsxs("h3", { className: "text-lg font-semibold text-holo-gold flex items-center gap-2", children: [_jsx(Shield, { size: 20 }), "Certifications"] }), isOwnProfile && (_jsxs(Dialog, { open: showCertificateForm, onOpenChange: setShowCertificateForm, children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { variant: "outline", size: "sm", "data-testid": "button-add-certificate", children: [_jsx(Plus, { className: "mr-2 h-4 w-4" }), "Add Certificate"] }) }), _jsxs(DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Add Certificate" }) }), _jsx(CertificateForm, { onClose: () => setShowCertificateForm(false) })] })] }))] }), userCertificates?.length === 0 ? (_jsx(Card, { children: _jsxs(CardContent, { className: "p-6 text-center", children: [_jsx(Shield, { className: "mx-auto mb-2 h-8 w-8 text-space-400" }), _jsx("p", { className: "text-space-400", children: "No certificates added yet" })] }) })) : (_jsx("div", { className: "grid gap-4", children: userCertificates?.map((cert) => (_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex justify-between items-start", children: [_jsxs("div", { children: [_jsx("h4", { className: "font-semibold text-white", children: cert.name }), _jsx("p", { className: "text-electric-green", children: cert.issuer }), cert.issueDate && (_jsxs("p", { className: "text-gray-400", children: ["Issued: ", new Date(cert.issueDate).toLocaleDateString()] }))] }), isOwnProfile && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => deleteCertificate.mutate(cert.id), disabled: deleteCertificate.isPending, "data-testid": `button-delete-certificate-${cert.id}`, children: _jsx(Trash2, { size: 16 }) }))] }) }) }, cert.id))) }))] })] }), _jsxs(TabsContent, { value: "work", className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("h2", { className: "text-xl font-semibold text-holo-gold flex items-center gap-2", children: [_jsx(Building, { size: 20 }), "Work Experience"] }), isOwnProfile && (_jsxs(Dialog, { open: showWorkHistoryForm, onOpenChange: setShowWorkHistoryForm, children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { "data-testid": "button-add-work-history", children: [_jsx(Plus, { className: "mr-2 h-4 w-4" }), "Add Experience"] }) }), _jsxs(DialogContent, { className: "max-w-4xl max-h-[90vh] overflow-y-auto", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Add Work Experience" }) }), _jsx(WorkHistoryForm, { onClose: () => setShowWorkHistoryForm(false) })] })] }))] }), userWorkHistory?.length === 0 ? (_jsx(Card, { children: _jsxs(CardContent, { className: "p-8 text-center", children: [_jsx(Building, { className: "mx-auto mb-4 h-12 w-12 text-space-400" }), _jsx("h3", { className: "text-lg font-semibold mb-2", children: "No Work Experience" }), _jsx("p", { className: "text-space-400 mb-4", children: isOwnProfile ? "Add your professional experience to showcase your skills." : "This user hasn't added work experience yet." }), isOwnProfile && (_jsx(Button, { onClick: () => setShowWorkHistoryForm(true), "data-testid": "button-first-work-history", children: "Add Your First Experience" }))] }) })) : (_jsx("div", { className: "space-y-4", children: userWorkHistory?.map((work) => (_jsx(Card, { children: _jsxs(CardContent, { className: "p-6", children: [_jsxs("div", { className: "flex justify-between items-start mb-4", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-white", children: work.jobTitle }), _jsx("p", { className: "text-electric-green", children: work.company }), work.location && _jsx("p", { className: "text-gray-400", children: work.location }), _jsxs("div", { className: "flex items-center gap-2 text-sm text-gray-400 mt-1", children: [_jsx(Calendar, { size: 14 }), _jsxs("span", { children: [new Date(work.startDate).toLocaleDateString(), " -", work.isCurrentJob ? ' Present' : ` ${new Date(work.endDate).toLocaleDateString()}`] })] })] }), isOwnProfile && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => deleteWorkHistory.mutate(work.id), disabled: deleteWorkHistory.isPending, "data-testid": `button-delete-work-${work.id}`, children: _jsx(Trash2, { size: 16 }) }))] }), work.description && (_jsxs("div", { className: "mb-4", children: [_jsx("h4", { className: "font-medium text-neon-cyan mb-2", children: "Description" }), _jsx("p", { className: "text-gray-300", children: work.description })] })), work.achievements && (_jsxs("div", { className: "mb-4", children: [_jsx("h4", { className: "font-medium text-neon-cyan mb-2", children: "Key Achievements" }), _jsx("p", { className: "text-gray-300", children: work.achievements })] })), work.skills && (_jsxs("div", { children: [_jsx("h4", { className: "font-medium text-neon-cyan mb-2", children: "Skills" }), _jsx("div", { className: "flex flex-wrap gap-2", children: work.skills.split(',').map((skill, index) => (_jsx(Badge, { variant: "outline", className: "text-xs", children: skill.trim() }, index))) })] }))] }) }, work.id))) }))] }), _jsxs(TabsContent, { value: "gallery", className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("h2", { className: "text-xl font-semibold text-holo-gold flex items-center gap-2", children: [_jsx(ImageIcon, { size: 20 }), "Photo Gallery"] }), isOwnProfile && (_jsxs(Dialog, { open: showGalleryForm, onOpenChange: setShowGalleryForm, children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { "data-testid": "button-add-image", children: [_jsx(Plus, { className: "mr-2 h-4 w-4" }), "Add Photo"] }) }), _jsxs(DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Add Photo" }) }), _jsx(GalleryImageForm, { onClose: () => setShowGalleryForm(false) })] })] }))] }), userGallery?.length === 0 ? (_jsx(Card, { children: _jsxs(CardContent, { className: "p-8 text-center", children: [_jsx(ImageIcon, { className: "mx-auto mb-4 h-12 w-12 text-space-400" }), _jsx("h3", { className: "text-lg font-semibold mb-2", children: "No Photos" }), _jsx("p", { className: "text-space-400 mb-4", children: isOwnProfile ? "Share your photos with the community!" : "This user hasn't shared any photos yet." }), isOwnProfile && (_jsx(Button, { onClick: () => setShowGalleryForm(true), "data-testid": "button-first-image", children: "Add Your First Image" }))] }) })) : (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: userGallery?.map((image) => (_jsxs(Card, { className: "overflow-hidden bg-space-800/50 border-space-700", children: [_jsxs("div", { className: "aspect-[4/5] bg-space-900 overflow-hidden", children: [image.url ? (_jsx("img", { src: image.url, alt: image.alt || image.caption || 'Gallery image', className: "w-full h-full object-cover", onError: (e) => {
                                                        e.target.style.display = 'none';
                                                        e.target.nextElementSibling?.classList.remove('hidden');
                                                    } })) : null, _jsx("div", { className: "w-full h-full flex items-center justify-center hidden", children: _jsx(ImageIcon, { className: "text-space-400", size: 48 }) })] }), image.caption && (_jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex justify-between items-start", children: [_jsx("p", { className: "text-sm text-gray-300 flex-1", children: image.caption }), isOwnProfile && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => deleteGalleryImage.mutate(image.id), disabled: deleteGalleryImage.isPending, "data-testid": `button-delete-image-${image.id}`, className: "text-red-400 hover:text-red-300 hover:bg-red-400/10 ml-2", children: _jsx(Trash2, { size: 16 }) }))] }) }))] }, image.id))) }))] }), _jsxs(TabsContent, { value: "archetype", className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("h2", { className: "text-xl font-semibold text-holo-gold flex items-center gap-2", children: [_jsx(ArchetypeIcon, { size: 20 }), "Village Archetype"] }), isOwnProfile && (_jsxs(Dialog, { open: showArchetypeQuiz, onOpenChange: setShowArchetypeQuiz, children: [_jsx(DialogTrigger, { asChild: true, children: _jsx(Button, { "data-testid": "button-take-assessment", children: userArchetype ? 'Retake Assessment' : 'Take Assessment' }) }), _jsx(DialogContent, { className: "max-w-4xl max-h-[90vh] overflow-y-auto", children: _jsx(ArchetypeQuiz, { onClose: () => setShowArchetypeQuiz(false) }) })] }))] }), userArchetype ? (_jsx(Card, { children: _jsxs(CardContent, { className: "p-8", children: [_jsxs("div", { className: "text-center mb-6", children: [_jsx("div", { className: "mx-auto mb-6 w-20 h-20 bg-gradient-to-br from-holo-gold to-electric-green rounded-full flex items-center justify-center", children: _jsx(ArchetypeIcon, { className: "text-space", size: 40 }) }), _jsx("h3", { className: "text-2xl font-bold text-holo-gold mb-2", children: userArchetype?.primaryArchetype }), _jsx("p", { className: "text-gray-300 mb-6", children: "Your primary village archetype based on assessment results." })] }), userArchetype?.scores && (_jsxs("div", { className: "max-w-md mx-auto space-y-3 mb-6", children: [_jsx("h4", { className: "text-sm font-semibold text-neon-cyan mb-3 text-center", children: "Detailed Scores" }), Object.entries(userArchetype?.scores || {}).sort(([, a], [, b]) => b - a).map(([archetype, score]) => (_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-white text-sm", children: archetype }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { className: "w-24 bg-space-800 rounded-full h-2", children: _jsx("div", { className: "bg-electric-green h-2 rounded-full", style: { width: `${(score / 5) * 100}%` } }) }), _jsxs("span", { className: "text-neon-cyan w-8 text-right text-sm", children: [score, "/5"] })] })] }, archetype)))] })), userArchetype?.description && (_jsx("div", { className: "p-4 bg-space-800/50 rounded-lg mb-6", children: _jsx("p", { className: "text-gray-300 text-sm", children: userArchetype?.description }) })), userArchetype?.completedAt && (_jsx("div", { className: "text-center", children: _jsxs("p", { className: "text-gray-400 text-xs", children: ["Assessment completed on ", new Date(userArchetype?.completedAt).toLocaleDateString()] }) }))] }) })) : (_jsx(Card, { children: _jsxs(CardContent, { className: "p-8 text-center", children: [_jsx(Star, { className: "mx-auto mb-4 h-12 w-12 text-space-400" }), _jsx("h3", { className: "text-lg font-semibold mb-2", children: "Discover Your Village Role" }), _jsx("p", { className: "text-space-400 mb-6", children: isOwnProfile
                                                ? "Take our assessment to discover which village archetype matches your skills and interests!"
                                                : "This user hasn't taken the archetype assessment yet." }), isOwnProfile && (_jsx(Button, { onClick: () => setShowArchetypeQuiz(true), className: "bg-gradient-to-r from-holo-gold to-electric-green text-space", "data-testid": "button-first-assessment", children: "Take Archetype Assessment" }))] }) }))] })] })] }));
}
